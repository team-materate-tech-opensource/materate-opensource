# -*- coding: utf-8 -*-
"""KG_28May.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KvgqJUUhif9CEw9Q92Z_DCC3MLViIXBG
"""

import networkx as nx

"""**Importing (Creating) nodes from pandas dataframe**"""

import pandas as pd
import numpy as np

edges = pd.read_table('./edges.txt', delim_whitespace=True, names=('source', 'target', 'weight'),
                   dtype={'source': np.int64, 'target': np.int64, 'weight': np.int64})

nodes = pd.read_table('./nodes.txt', delim_whitespace=True, names=('node', 'concept', 'skills','parents','children','neighbors'))
'''edges = pd.DataFrame({'source' : [0,1,1],
                      'target' : [1,2,3],
                      'weight' : [100,50,50]})'''

'''nodes = pd.DataFrame({'node' : [0,1,2,3],
                      'concept' : ['Triangle', 'Square', 'Congruency', 'Addition'],
                      'skills' : [[0.3,0.4,0.1], [0.6,0.1,0.9], [0.9,0.5,0.5],  [0.6,0.1,0.5]]})'''


G = nx.from_pandas_edgelist(edges, 'source', 'target', 'weight',create_using=nx.DiGraph())

"""**Note:** Neighbour relationship type can be added as an addtional attribute above, but that will have to be done manually, alternatively, children/parents can be printed for any node using the predecessors() / successors() functions. Relationship types can also be viewed using nx.draw(), which plots the KG."""

nx.set_node_attributes(G, pd.Series(nodes.concept, index=nodes.node).to_dict(),'concept')
nx.set_node_attributes(G, pd.Series(nodes.skills, index=nodes.node).to_dict(),'skills')
nx.set_node_attributes(G, pd.Series(nodes.parents, index=nodes.node).to_dict(),'parents')
nx.set_node_attributes(G, pd.Series(nodes.children, index=nodes.node).to_dict(),'children')
nx.set_node_attributes(G, pd.Series(nodes.neighbors, index=nodes.node).to_dict(),'neighbors')

"""**Drawing and Printing Nodes**"""

nx.draw(G,with_labels=True)
G.nodes(data=True)

"""**Editing Node Attributes**"""

G.add_node(1, concept="Circle",skills=[0.2,0.7,0.5])
G.nodes(data=True)

"""**Deleting a node**"""

G.remove_node(2)
G.nodes(data=True)

"""**BFS**

**Pt. I- Listing edges**
"""

list(nx.bfs_edges(G, source=0, depth_limit=1))

list(nx.bfs_edges(G, source=0))

"""**Pt. II- Listing nodes visited**"""

root = 3
edges = nx.bfs_edges(G, root)
nodes = [root] + [v for u, v in edges]
nodes

root = 0
edges = nx.bfs_edges(G, root)
nodes = [root] + [v for u, v in edges]
nodes

"""**Accessing/printing individual lines quickly:**
The linecache module allows one to get any line from any file, while attempting to optimize internally, using a cache, the common case where many lines are read from a single file.
"""

from linecache import getline
print getline('./nodes.txt')[2]
#to print multiple lines:
from linecache import getlines
print getlines('./nodes.txt')[1:3]